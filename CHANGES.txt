v0.16.6
    26th January 2021
    New feature/workaround: switch to force makeblastdb to create a BLAST v4 database, rather than the default v5.
    makeblastdb was producing an out of memory error on some systems.
v0.16.5.1
    22nd September 2020
    Bugfix: temp_outCDR3 referenced before assignment when there were no V hits -> fixed
    Bugfix: new function fileSystemSafeMove() which uses try-except to catch usages of shutil.move which fail because
    source and target are on different filesystems (OSError: [Errno 18] Invalid cross-device link).  Uses
    shutil.copy/os.remove in these cases.
v0.16.5
    23rd July 2020
    Bugfix: File mode only worked when all functions used, due to reliance on filename stem generated by the cli
    interface only when the call function was specified.  Now fixed.
v0.16.4
    16th July 2020
    Bugfix: Previous fix had introduced a bug which broke file mode entirely (misplaced bracket when checking the length
    of args.outdir).  Fixed.
v0.16.3
    15th July 2020
    Bugfix: dir mode output directory wasn't setting correctly, due to production of a list of outdirs (one for each 
    indir).  Behaviour should now be consistent - it is possible to supply several directories in dir mode, and if 
    outdirs are supplied, the number must match.
v0.16.2
    14th July 2020
    Bugfix: parseCV() referenced 'paired_read' without allocation if there was an ambiguity in segment allocation.
v0.16.1
    6th July 2020
    Bugfix: make_seq2clone() output file title line was comma-seperated, the body of the file was tab-seperated.  Title
    line format now matches body of file.
v0.16.0
    29th June 2020
    New functionality: make_seq2clone() to produce a csv file which ties original read ID to VJ and CDR3.  This also
    involved altering derep_FASTQ() to take a clust_file option, and the read_cluster_files() function.  The function
    can be called from the reptools commandline in file mode ONLY, using --seq2cloneFile (but only when the denoise
    function is invoked at the commandline, as the log files from this are essential).
v0.15.1
    9th June 2020
    Bugfix: Prevent unintended nesting of default output directories in dir mode.
    Bugfix: File mode now returns silently if any of the functions do not return any hits; previously raised TypeError.
    Bugfix: Files now FR sorted correctly if no C dictionary is supplied (failure to do so resulted in an error or in
            erroenous output).
    TODO: Convert prob handling to logs
    TODO: Prevent overwrite when outputdir==inputdir [not sure if this still occurs]
    TODO: Investigate issue with codec error when outdir IS supplied (in file mode) [not sure if this still occurs]
    TODO (long-term): Parallelise denoise in dir mode by dispatching files in parallel
    TODO (long-term): Polish CDR3 output by  check start and end of frameshifted CDR3 to see if +- nt results in correct
                      CDR3 ends.
v0.15.0
    8th June 2020
    Major change: allow calling only a subset of genes (V, J, C).  Call cannot be combined with other functions unless
    both V and J are specified, since CDR3 will not be emitted.  Genes to be called chosen according to which dbs are
    supplied.
v0.14.8b0
    5th June 2020
    Bugfix: Line format info (position of cluster ID) wasn't being sent to call_filepair() in file mode.
v0.14.8
    5th June 2020
    Minor enhancement: Provided cli option for unusual formatting of read title lines (e.g. for Mixcr tools output)
    Minor enhancement: Now sends aligner paths to functions correctly (needed to be at default before)
    Minor enhancement: Now sends threads to aligners, and defaults to maximum available.
    TODO: Investigate issue with codec error when outdir IS supplied (in file mode)
    TODO: Convert prob handling to logs
    TODO: Fix unintended nesting of default output folders
    TODO: Prevent overwrite when outputdir==inputdir
v0.14.7
    5th June 2020
    Bugfix: Do not output empty files from EEfilter - empty files crashed VDJtools output.  Added function to do this:
    removeemptyfile(), and also removeemptyfilepair(), for use by emitFR() in call_gene.py.
    TODO: Investigate issue with codec error when outdir IS supplied (in file mode)
    TODO: Convert prob handling to logs
    TODO: Provide option for unusual formatting of read title lines (e.g. for Mixcr tools output)
    TODO: Fix unintended nesting of default output folders
v0.14.6
    4th June 2020
    Bugfix: Use of float16 in denoise led to numba throwing an error, so changed to float32.
    Bugfix: Reverted all denoising prob code to use decimals rather than logs, as the log code is only half-written.
    Bugfix: Now removes empty called fastq files and raw CDR3 files - empty files crashed denoise.
    Bugfix: Fixed output from denoise [saveFASTX()] so that qual scores above the standard ASCII set are saved as the 
    maximum possible (Phred=93)
    Bugfix: Missing reptools references in make_VDJtools()
    Bugfix: Fixed default outdir in make_VDJtools()
    TODO: Investigate issue with codec error when outdir IS supplied (in file mode)
    TODO: Convert prob handling to logs
v0.14.5
    4th June 2020
    Bugfix: Fix in v0.14.2 wasn't effective when the input files were in the local directory.  Fix by getting absolute
    path
    Bugfix: tiebreak() wasn't being referenced as reptools.tiebreak(), so attempt to break tie resulted in NameError
    TODO: Investigate issue with codec error when outdir IS supplied (in file mode)
v0.14.4
    4th June 2020
    Bugfix: Failure to find any V genes resulted in "UnboundLocalError: local variable 'temp_outCDR3' referenced before
    assignment" because of attempt to move a non-existant temporary output file.  Fixed by checking len(Vhits) before
    attempting move.
v0.14.3
    4th June 2020
    Minor enhancement: cli option to report version.
v0.14.2
    4th June 2020
    Bugfix: File mode crashed if outdir wasn't supplied, due to the cli function sending False to build_fn() as the
    outdir (TypeError: expected str, bytes or os.PathLike object, not bool).  Fixed by setting args.outdir to the
    directory in which the first supplied input file is located (file mode only).
v0.14.1
    29th May 2020
    Maximum Phred score changed to 120 (from 50)
    Attempt to modify qual scores on substitution denoising (calculate source misread probability and multiply with
    destination probability)
    TODO: Thorough testing, convert prob handling to logs
    23rd May 2020
    Converted to Python 3 (no longer works in Python 2; decision forced by requirement for numba to speed up denoiser)
    Other major changes:
        1. Denoiser implemented
        2. New command-line interface implemented
        3. Option in cli to run on a filepair, rather than by directory
        4. Selection logic for which actions to perform (in cli).
        5. EE filtering is performed after denoising, and now defaults to 1 (not 0.2)
v0.13.0
    30th April 2020
    Enhancement: Added option to output the V segment on its own (ending at the C103 residue).
v0.12.7
    26th April 2020
    Minor enhancement: added remove_if_not_empty option to remove_dir(), with default=True.  I think this was the
    intended behaviour, but it was failing to remove a non-empty unnested directory when recursive=False.
v0.12.6
    25th April 2020
    Bugfix: If no hits were found at any stage, the next stage for would with an error.  Solution is to skip all
     subsequent stages.
    Bugfix: Various file does not exist errors when running on ARC.  Suspect a race condition.  Modification of 
     cautious_mkdir(), ensure_dir(), remove_dir(), remove_file_if_present()  to check that creation/deletion has
     occurred.
v0.12.5.2
    25th April 2020
    Tweak: set max_target_seqs in blastn and SWIPE to 20, to reduce .b6 file size
    Tweak: Check the threads argument sent to SWIPE, limiting it to CPU number.
v0.12.5.1
    25th April 2020
    Bugfix: if id was not supplied to blastCaller(), as is now the case, it was using 0.95 as a default.  Changed
     default to pass, and altered the blastCaller() code so that perc_ident is only set if id!=False.
v0.12.5
    24th April 2020
    Chasing a major bug where some genes are assigned a hit which is not what BLAST has returned.
        Selection of ambiguous V genes accroding to F read hits - line 730 bugfix
        Stop sending id threahold to BLAST, as this was producing weird results (with some hits being omitted even
         though they exceeded the threshold).  Instead, mincol and id filtering performed AFTER top hit selection,
         using a new function, filterHits(), which works on a list of hits.  It is called by get_top_hits(), 
         parseHitfile(), and find_nearest_to_overlap_hits(), which may optionally supply any or all of mincol, id, and
         evalue.
v0.12.4
    24th April 2020
    Chasing a major bug where some genes are assigned a hit which is not what BLAST has returned.
        First step = rewrite of hitsParser (for clarity, and to remove duplication of final hsp in a file).
v0.12.3
    23rd April 2020
    Minor bugfixes:
        1. Output EE-filtered CDR3 as fastq (previously, it had a fastq extension, but was a fasta file)
        2. Output fastq and fasta sequences in upper case (previously, most were lower case)
        3. Error with default title split in get_top_hits() fixed - cannot be empty (Python error is raised if it is),
            but it can be None.
v0.12.2
    23rd April 2020
    Major bugfix:
        In intapproach(), call to getReadIDs() moved to AFTER adapter trimming - change in ordering during adapter
        trimming was breaking F/R/miss read allocation.
    Minor bugfix:
        2. Fixed intapproach_dir() so that an extra underscore is no longer added to _1 and _2 output file names.
v0.12.1
    22nd April 2020
    Following profiling, tweak hitsParser() in "aligners.py" to reduce usage of startswith() and endswith()
v0.12.0
    22nd April 2020
    Cleaned version of v0.11.2, with most deprecated functions removed.
    Retained, in case they become useful:
        In "sequence_search_and_extract.py": retrieve_tophit(), retrieve_tophit_names()
        In "aligners.py": nothing removed, as callers not currently being used are either compatible, or in development.
        In "trim_and_filter.py": filter_CDR3()
        In "utils.py": assign_filepairs(), ExtractGene(), nt_check()
        N.B. reans() and trans_nt() in "utils.py" appear to be the same function.  Left as-is for now.
v0.11.2
    22nd April 2020
    Added intapproach_dir() to process by directory
v0.11.1
    21st April 2020
    Rewrote derep_seq() to be a homebrewed derep function, to remove usearch dependency.
    Added native EEfilter() and calculate_EE(), for same reason.
    Added ability to output miss files from each stage.
    Added adapter trimming options to integrated pathway.
v0.11.0
    20th April 2020
    Major rewrite of VDJ label/VDJ sort/select reverse strand/extract CDR3 code, to streamline and avoid repeat
    searches.  Mostly into new file (integrated_approach.py).
    Added get_top_hits() function
    Added a top_hits_only() option to find_nearest_to_overlap_hits() - as SWIPE deosn't have a switch for this.
v0.10.5
    15th April 2020
    Tweaks to vsearchCall() - add threads setting, test for available cores, use reptools.clean_up(), allow gap penalty
    specification, allow minwordmatches specification.
v0.10.4
    14th April 2020
    Experimental callers added to test speed.  Will remove unused ones and flesh out any which are useful in the next
    version.
    Callers added are: sswCall(), tblastxCall().  parasailCall() is present, but not functioning.
v0.10.3.2
    20th March 2020
    Fixed selectstrand().  Previously, selected a read only when there was a hit ON THAT STRAND.  New behaviour is to
    take the strand of the desired direction, even when the only hit was on the other strand.
v0.10.3.1
    16th March 2020
    Minor patch to blastCall(), so that a warning reported by BLAST is printed to screen, but does not raise a
    python error.
v0.10.3
    Added "-blastdb_version 4" to makeblastdb call when using swipe, which doesn't work with other versions
v0.10.2
    Bug fix: fastq_filter_output_parser() crashed when vsearch was used.  Fudge is to disable count return, as not 
    currently used.  Therefore fastq_filter_output_parser() not currently called by qualfilter_dir().
    Also, default usearchpath for qualfilter_dir() is now "vsearch".
v0.10.1
    Bug fix: VJCtag() crashed when the hits output was empty. Added a try-except block to handle this (lines 749-753
    of sequence_search_and_extract.py in v0.10.1) 
v0.10.0
	Now installs in Python3 - most/all functions probably won't work, or work incorrectly, though - testing required.
    TODO: Remove receptorhits_dir() and receptor_hits(), as they are obselete (though keep them in another file, 
    as they may be useful for other projects)
v0.9.4
	Change to enhance speed greatly: use of VJCtag_dir() to select VJC hits is problematic, as it searches all reads
	for all genes, even if there is no hit for the first gene.
	To address this, the fullSearch switch has been added to VJCtag_dir() and VJCtag().  If fullSearch==False (the
	default), only hits for the previous gene are searched for each gene.  This means that allhits output is
	meaningless, and ignored.
v0.9.3
	Fix in aligners.py blastCall() - when the fasta db file had a space in the path, BLAST would fail (at least in
	Windows).  Simple fix for this was to make a tmpfile copy of the input db.
	retrieve_tophit_names() and retrieve_tophit() still weren't behaving with evalue detection in non-hit files, so
	tweaked the detection code so that the test is perfomed before breaking out of the loop.  If the loop completes
	because there are no hits anywhere in the file, the default will stay in place (which won't make any difference in
	the absence of hits)
	Read version from version.py file (supplies reptools.__version__ while maintaining single-sourcing of version)
v0.9.2
	Bugfix in hspList:conditional_append() - mincols filtering was set to <= rather than >= in the case where both
	evalue and mincols were set
	Rewrite of selectstrand(), which had been broken by other changes.
	Renamed retrieve_tophits() to retrieve_tophit_names()
	Created new retrieve_tophit() function, which returns the top hsp object for each query (breaking ties); this is
	now used by selectstrand()
v0.9.1
	Added vsearchcall().  Although vsearch is meant to be usearch-like, it doesn't accept FASTQ, so a conversion (to
	FASTA) step is required.  Also, it doesn't have ublast or local search options, so these must be removed.
	As vsearch doesn't report evalues for nucleotide hits (setting all to -1), the u14Hsp is altered to record an
	evalue of -1 as None.
	retrieve_tophits() now uses bitscore if evalue is None (with option to force this behaviour)
	uSearchcall() modified to use default of maxaccepts and maxrejects of zero (vsearchcall() uses the same)
	Added test.countgenehits_hitsfile()
v0.9.0
	Rewrite of VJCtag() to:
		(a) allow use of stellar/BLAST/vsearch as well as usearch
		(b) provide options for output of hits, misses, and/or both in the same file (can then use this in place of
		receptorhits())
	Added tests.checkgeneID_hitsfile()
	Added modified retrieve_tophits() as stand-alone function in sequence_search_and_extract.py
	Altered gffHsp to get evalue directly from file, to remove redundant evalue calculation, and to calculate hit span.
	Fixed bug in retrieve_tophits().  Failure to reset minevalue when a hit was identified met the last hit in the list
	was being returned.
	
v0.8.4
	Reverted to v0.8.1 version of CDR3slice(), fixing naming bug but removing use of classes, as they were found to be
	much slower.
v0.8.3
	Added comparisons.py to reptool.test submodule.  To be used as a home for old versions of functions, to
	benchmark against replacements.
	Placed v081_CDR3slice_dir() and v081_CDR3slice() in comparisons.py, to look at overall performance hit of move to
	classes for FASTQ/FASTA reads in CDR3slice() which was implemented in v0.8.2
v0.8.2
	CDR3slice output was giving each read the same title.  Couldn't see why in code: rewrote to use FASTA and FASTQ
	read classes:
		classes FASTQread and FASTAread added to utils
		CDR3slice() import, and read in/out/slice code modified accordingly
v0.8.1
	BLAST+ and SWIPE outputs weren't working because the b6/tsv files contain only the part of the query ID before a
	space.
	Altered output code to reflect this: CDR3slice() only so far; look out for this when rewriting other functions
	Added **kwargs to CDR3slice_dir() and CDR3_slice(), to pass through to call functions - will make it easier to
	alter call criteria
v0.8.0
	Added tests submodule
	Removed superfluous files: u14_parsing.py and pipeline v20.py
v0.7.3
	Attempt to fix failure to add final hsp in a file (presumed cause of BLAST parser crash)
	Created hitsParser() to replace the u14Parser, stellarParser, b6Parser, swipeParser
	b6Hsp was assigning strand the wrong way round: fixed
	removed all references to usearch_evalues flag (Stellar actually does calculate evalues, so this flag was never
	needed)
v0.7.2
	Fix to allow taking first base in a reverse slice in CDR3_slice() - a real edge case, but could come up if code
	reused.
	Rewrite of blastCall(), based on swipeCall()
	Rewrite of b6Hsp, based on swipeHsp
	Rewrite of b6Parser(), based on swipeParser
	Bugfix in find_nearest_to_overlap_hits() to cope with there not being any hits
v0.7.1
	rewrite of find_nearest_to_overlap_hits() - need to test thoroughly, may need to revert and rewrite again
	new complement() function in utils.py.  reverse_comp() now calls this.
	bugfixes in CDR3_slice(), to tweak slice positions and take reverse slice correctly
	alter subprocess.POpen() to subprocess.check_call() when creating blast db in swipeCall(); this seems to force it
    to wait for db creation
v0.7.0
Stellar doesn't seem to work effectively for CDR3 extraction, as it is fond of leaving terminal gaps/mismatches
Therefore shift to using SWIPE (currently Linux/Mac binaries only, but should be compilable for Windows)
	Wrote SWIPE tsv parser : swipeParser() and swipeHsp()
	Added hsplist class (subclassing list) with conditional_append() method to clean up filtering by evalue and mincols
	Wrote SWIPE caller : swipeCall()
	Adapted CDR3slice() to call SWIPE and parse SWIPE by default
	Added clean_up() to utils (removes each in a list of files)
	Rewrote CDR3 slicing:
		new get_position() function in aligners.py
		rewrite of find_nearest_to_overlap_hits() to use get_position() 
		rewrite of CDR3slice() to use get_position()
	Check everything runs in Linux (Ubuntu) - not complete
v0.6.4
Stellar extraction bug fixes/changes:
	implement modified getForwardreadpos() function and handling
	altered CDR3slice() to take smaller piece of V as a dictionary (20bp rather than 50bp)
	Moved CDR3_dir() generation of a shorter V gene db to a separate function (make_shorter_db())
v0.6.3
Stellar extraction bug fixes (CDR3 still doesn't work)
v0.6.2
Implement stellar parsing for CDR3 extraction and receptor_hits:
	modification of find_nearest_to_overlap_hits() to accept u14 or gff files
	modification of receptor hits to use usearch or stellar:
		retrieve_tophits() changed to select top hits by lowest evalue, rather than highest bitscore
		all receptors must now be searched with the same algorithm (stellar added as an option)
v0.6.1
Bugfixes in stellar parsing, and [default] option to read evalues from gff file (attribute eValue)
aligners.py split off from utils.py
v0.6.0
Add stellar call and gff parser.  Calculation of e values according to uSearch-default scoring
v0.5.3
Added fulldp option to uSearchcall().  Currently not used by parent functions (under development)
v0.5.2
Bug fix in u14parser() - line 944 added.  Previously, function was returning an empty list for the hits in the final
entry of a file.
v0.5.1
FASTAparser() fixed problem with empty lines
Changed VDJtools output in make_VDJtools() and make_VDJtools_dir() to provide gene columns to fill, and empty gene
columns to write.
v0.5.0
Added denoise.py, with denoiseTCR() and helper functions
v0.4.0
Added full_run_longamplicons() to automate a complete run of the pipeline (post-demultiplex).
TODO:
Add denoising code.
Sort demultiplex so that it trims adapters/primers, at which point the default of remove_adapters can be True. 
Add cli for full_run_longamplicons().
Add warning that a particular EE folder is being looked with, when the command is being used only for downstream
stages.
Add function to run pipeline for shorter (mergeable) amplicons
Fix code to work with only a single read file (rather than a readpair)
Rewrite for Python3, then integrate cutadapt calls.
v0.3.0
Rewrite of receptorhits_dir() and receptorhits() to use newly chosen search strategies
(using uBLAST), and to add VJC tags without having to run VJCtag_dir() separately.